buildscript {
    ext {
        springBootVersion = '2.0.0.RELEASE'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.moowork.gradle:gradle-node-plugin:1.1.1"
    }
}

apply plugin:"com.moowork.node"
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.csula'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}


dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    testCompile('org.springframework.boot:spring-boot-starter-test')

    // https://mvnrepository.com/artifact/org.mongodb/mongo-java-driver
    compile group: 'org.mongodb', name: 'mongo-java-driver', version: '1.3'

    // https://mvnrepository.com/artifact/org.springframework.data/spring-data-mongodb
    compile group: 'org.springframework.data', name: 'spring-data-mongodb', version: '2.0.5.RELEASE'

    // https://mvnrepository.com/artifact/javax.inject/javax.inject
    compile group: 'javax.inject', name: 'javax.inject', version: '1'

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-parent
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-parent', version: '1.5.6.RELEASE', ext: 'pom'

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-mail
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-mail', version: '1.5.10.RELEASE'


}


node
        {
            version = "8.10.0"
            download = true
            nodeModulesDir = file("frontend")
        }

task buildClientDev(type: NpmTask, dependsOn: 'npmInstall'){
            group = 'build'
            description = 'Compile client side folder for development'
            args = ['run','buildDev']}

task buildClient(type:NpmTask, dependsOn:'npmInstall'){
            group = 'build'
            description = "Compile client side folder for production"
            args = ['run','build']}

task buildClientWatch(type: NpmTask, dependsOn: 'npmInstall'){
            group = 'application'
            description = "Build and watches the client side assets for rebuilding"
            args = ['run','buildWatch']}

bootRun.dependsOn(buildClientDev)

jar.dependsOn(buildClient)